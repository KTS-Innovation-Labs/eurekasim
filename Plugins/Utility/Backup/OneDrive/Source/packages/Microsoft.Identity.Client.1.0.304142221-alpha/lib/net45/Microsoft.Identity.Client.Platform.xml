<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Identity.Client.Platform</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Identity.Client.PublicClientApplicationExtensions.AcquireTokenWithIntegratedAuthAsync(Microsoft.Identity.Client.PublicClientApplication,System.String[])">
            <summary>
            .NET specific method for intergrated auth. To support Xamarin, we would need to move these to platform specific libraries.
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Identity.Client.PublicClientApplicationExtensions.AcquireTokenWithIntegratedAuthAsync(Microsoft.Identity.Client.PublicClientApplication,System.String[],System.String,System.String)">
            <summary>
            .NET specific method for intergrated auth. To support Xamarin, we would need to move these to platform specific libraries.
            </summary>
            <param name="scope"></param>
            <param name="authority"></param>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Identity.Client.ClientAssertionCertificate">
            <summary>
            Containing certificate used to create client assertion.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.ClientAssertionCertificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Constructor to create credential using certificate.
            </summary>
            <param name="certificate">The certificate used as credential.</param>
        </member>
        <member name="P:Microsoft.Identity.Client.ClientAssertionCertificate.MinKeySizeInBits">
            <summary>
            Gets minimum X509 certificate key size in bits
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Client.ClientAssertionCertificate.Certificate">
            <summary>
            Gets the certificate used as credential.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Client.ClientAssertionCertificate.Thumbprint">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Client.PlatformParameters">
            <summary>
            Additional parameters used in acquiring user's authorization
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.PlatformParameters.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.PlatformParameters.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="promptBehavior"></param>
            <param name="ownerWindow"></param>
        </member>
        <member name="P:Microsoft.Identity.Client.PlatformParameters.OwnerWindow">
            <summary>
            Gets the owner of the browser dialog which pops up for receiving user credentials. It can be null.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Client.SilentWebUI.NavigationWaitMiliSecs">
            <summary>
            This is how long we allow between completed navigations.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Client.SilentWebUI.NavigationOverallTimeout">
            <summary>
            This is how long all redirect navigations are allowed to run for before a graceful 
            termination of the entire browser based authentication process is attempted.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.SilentWebUI.WaitForCompletionOrTimeout(System.Threading.Thread)">
            <summary>
            Waits on the UI Thread to complete normally for NavigationOverallTimeout.  
            After it attempts shutdown the UI thread graceful followed by aborting
            the thread if a graceful shutdown is not successful.
            </summary>
            <param name="uiThread"></param>
            <returns>Returns true if the UI thread completed on its own before the timeout.  Otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Identity.Client.SilentWebUI.OnAuthenticate(System.String)">
            <summary>
            Callers expect the call to show the authentication dialog to be synchronous.  This is easy in the 
            interactive case as ShowDialog is a synchronous call.  However, ShowDialog will always show 
            the dialog.  It can not be hidden. So it can not be used in the silent case.  Instead we need
            to do the equivalent of creating our own modal dialog.  We start a new thread, launch an 
            invisible window on that thread.  The original calling thread blocks until the secondary
            UI thread completes.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Identity.Client.SilentWindowsFormsAuthenticationDialog.SuppressBrowserSubDialogs">
            <summary>
            Make sure that the browser control does not surface any of it's own dialogs.
            For instance bad certificate or javascript error dialogs.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.SilentWindowsFormsAuthenticationDialog.SignalDone(System.Exception)">
            <summary>
            This method must only be called from the UI thread.  Since this is the 
            callers opportunity to call dispose on this object.  Calling
            Dispose must be done on the same thread on which this object
            was constructed.
            </summary>
            <param name="exception"></param>
        </member>
        <member name="T:Microsoft.Identity.Client.StaTaskScheduler">
            <summary>Provides a scheduler that uses STA threads.</summary>
        </member>
        <member name="F:Microsoft.Identity.Client.StaTaskScheduler._tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:Microsoft.Identity.Client.StaTaskScheduler._threads">
            <summary>The STA threads used by the scheduler.</summary>
        </member>
        <member name="M:Microsoft.Identity.Client.StaTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the StaTaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
        </member>
        <member name="M:Microsoft.Identity.Client.StaTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:Microsoft.Identity.Client.StaTaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:Microsoft.Identity.Client.StaTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.Identity.Client.StaTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Microsoft.Identity.Client.StaTaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Client.WindowsFormsWebAuthenticationDialogBase.WebBrowser">
            <summary>
            Gets Web Browser control used by the dialog.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Client.WindowsFormsWebAuthenticationDialog">
            <summary>
            The browser dialog used for user authentication
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Client.WindowsFormsWebAuthenticationDialog.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
        </member>
    </members>
</doc>
